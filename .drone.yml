---
kind: pipeline
type: docker
name: unit_test

workspace:
  path: /app

environment:
  # Python
  PYTHONDONTWRITEBYTECODE: 1
  PYTHONUNBUFFERED: 1
  # JWT
  JWT_SECRET_KEY: "3f9b6bac9a7bf08feb5f37bf255ad8102d11a20b0deb2d5e14ced7f5c34afbfb"
  JWT_ALGORITHM: "HS256"
  JWT_EXPIRE_TIME: 120

  # Application
  APPLICATION_NAME: "application_testing"
  APPLICATION_ENVIRONMENT: "TEST"
  APPLICATION_LOG_LEVEL: "DEBUG"
  APPLICATION_LOG_PATH: "/var/log/application"

  # DB
  POSTGRES_HOST: "db"
  POSTGRES_USERNAME: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_PORT: 5432
  POSTGRES_DB: test

  # Cache
  REDIS_HOST: "cache"
  REDIS_PORT: 6379
  REDIS_USERNAME: default
  REDIS_PASSWORD: redis_username
  REDIS_BACKEND_DB: 0


steps:
  - name: waiton cache
    image: akhenakh/drone-waiton:1.0
    settings:
      globaltimeout: 60s
      urls:
        - tcp://cache:6379

  - name: waiton db
    image: akhenakh/drone-waiton:1.0
    settings:
      globaltimeout: 60s
      urls:
        - tcp://db:5432


  - name: create cookiecutter project
    image: python:3.9-slim
    commands:
      - pip install --upgrade pip cookiecutter
      - rm -rf /project/*
      - cookiecutter --no-input -f ./ -o /project project_name="testing project"
    volumes:
      - name: pythonpath
        path: /project

  - name: export requirements file
    image: python:3.9-slim
    commands:
      - cd /project/testing-project
      - pip install --upgrade pip poetry
      - poetry export -f requirements.txt --output /project/requirements.txt --without-hashes --dev
    volumes:
      - name: pythonpath
        path: /project

  - name: test
    image: python:3.9-slim
    environment:
      ENVIRONMENT: TEST
      MIGRATION: true
      CREATE_INIT_DATA: false
    commands:
      - cd /project/testing-project
      - pip install --no-cache-dir --upgrade -r /project/requirements.txt
      - aerich upgrade
      - python ./tests/create_test_init_data.py
      - pytest

    volumes:
      - name: pythonpath
        path: /project

  - name: notification
    image: appleboy/drone-telegram
    when:
      status:
        - failure
        - success
    settings:
      token:
        from_secret: Telegram_gggoingdown_CI_bot_token
      to:
        from_secret: Telegram_chat_id
      message: >
        {{#success build.status}}
          Repository: {{repo.name}}
          Branch: {{commit.branch}}
          Commit message:  {{commit.message}}
          Message: Test succeeded. Good job.
          Version: {{build.number}}
        {{else}}
          Repository: {{repo.name}}
          Branch: {{commit.branch}}
          Version: {{build.number}}
          Commit message:  {{commit.message}}
          Message: Test failed. Fix me please.
          Version: {{build.number}}
        {{/success}}

services:
  - name: cache
    image: redis:6.2
    commands:
      - redis-server --requirepass redis_username

  - name: db
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: test


trigger:
  branch:
    - master
    - test/*
    - feature/*
    - fastapi/*


volumes:
  - name: pythonpath
    temp: {}
---
kind: signature
hmac: dee9940084aa37183e69a145ed8077e4f1d5a0be4a2ad4915b5cf30766d9edf4

...
